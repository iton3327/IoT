//////////////////////////////////////////////////////////////////////////
// Author: RSP @ Embedded System Lab (ESL), KMUTNB, Thailand
// File: OLED_SSD1306_SPI_Demo.ino
// Last Modified: 2014-07-13
// Note:
//   This Arduino sketch demonstrates how to use the OLED_SSD1306_SPI class.
//   We use a Blue-color, 128x64 OLED display module (SPI mode).
//   VCC=+3.3V only, D0 = D13(SCK), D1 = D11(MOSI), RST = D8, DC = D7, CS = D6
//////////////////////////////////////////////////////////////////////////

#include <SPI.h>
#include "OLED_SSD1306_SPI.h"

using namespace esl;

OLED_SSD1306_SPI oled( 6 /*dc*/, 7 /*cs*/, 8 /*rst*/ );

char sbuf[20];
uint32_t timestamp;

void setup() { 
  // initialize the SPI first
  SPI.begin();
  SPI.setDataMode( SPI_MODE0 );
  SPI.setBitOrder( MSBFIRST );
  SPI.setClockDivider( SPI_CLOCK_DIV4 );

  oled.init(); // initialize the OLED display

  show_start_page(); // show the start page for 10 seconds
  delay(10000);
  
  timestamp = millis();
}

uint32_t value = 1000;

void loop() {
  if ( millis() - timestamp >= 100 ) { 
    oled.clearBuffer();
    oled.useNormalFont();
    oled.drawText( 4, 8, "Meter ID:" );
    oled.drawText( 4, 24, "Electric Energy (kWh)" );
    oled.useBoldFont();
    oled.drawText( 64, 8, "123456" );
    sprintf( sbuf, "%05u.%03u", (uint16_t)(value/1000), (uint16_t)(value%1000) );
    oled.drawText( 22, 46, sbuf );
    oled.drawRect( 10, 36, OLED_SSD1306_SPI::LCD_WIDTH-10, OLED_SSD1306_SPI::LCD_HEIGHT-1 );
    oled.update();
    value += 1;
    timestamp += 100;
  }
}


static prog_uchar face_bitmap [48 * 64 / 8] PROGMEM = {
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x0F, 0x0F,
 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x7F,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x07, 0x81, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80,
 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF0,
 0xF0, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x87, 0xC7, 0xC7, 0xC7, 0xE7, 0xE7, 0xE7,
 0xE7, 0xCF, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0x7F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x01,
 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xE0,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x10, 0x70, 0x20, 0x30, 0x30, 0x78, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFC, 0xF0, 0xE0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x80, 0xE0, 0xF0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x60, 0x60, 0x71, 0x73, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x0C, 0x0C, 0x0F, 0x1F, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 0x7F, 0x7F, 0x3F, 0x3F, 0x3F, 0x1F, 0x1F, 0xFF, 0x1E, 0x18, 0x10, 0xC0, 0x80, 0x80, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFF, 0xFF, 0xFF,
 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
};

void show_start_page() {
  uint8_t x, y;
  for ( uint16_t i=0; i < (48*64/8); i++ ) {
    x = (i % 48) + (OLED_SSD1306_SPI::LCD_WIDTH - 48)/2; //centered in x direction
    y = 8*(i / 48);
    oled.writeByteToBuffer( x, y, pgm_read_byte_near( face_bitmap + i ) ^ 0xff );
  }
  oled.useNormalFont();
  oled.drawText( 2, 2, "Hello" );
  oled.update();
}

//////////////////////////////////////////////////////////////////////////
