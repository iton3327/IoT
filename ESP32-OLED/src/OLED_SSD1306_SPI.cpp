//////////////////////////////////////////////////////////////////////////
// Author: RSP @ Embedded System Lab (ESL), KMUTNB, Thailand
// File: OLED_SSD1306_SPI.cpp
// Last Modified: 2014-07-13
//////////////////////////////////////////////////////////////////////////

#include "OLED_SSD1306_SPI.h"

using namespace esl;

OLED_SSD1306_SPI::OLED_SSD1306_SPI(
   uint8_t dc, uint8_t cs, uint8_t rst, 
   uint8_t sck, uint8_t mosi )
  : dc_pin(dc), cs_pin(cs), rst_pin(rst), sck_pin(sck), mosi_pin(mosi)
{
   buffer = (uint8_t *)malloc(BUFFER_SIZE);
   use_hw_spi = false;
   pinMode( dc_pin, OUTPUT );
   pinMode( rst_pin, OUTPUT );
   pinMode( cs_pin, OUTPUT );
   pinMode( sck_pin, OUTPUT );
   pinMode( mosi_pin, OUTPUT );
   digitalWrite( cs_pin, HIGH );
}

OLED_SSD1306_SPI::OLED_SSD1306_SPI( uint8_t dc, uint8_t cs, uint8_t rst )
  : dc_pin(dc), cs_pin(cs), rst_pin(rst), sck_pin(0xff), mosi_pin(0xff)
{
   buffer = (uint8_t *)malloc(BUFFER_SIZE);
   use_hw_spi = true;
   pinMode( dc_pin, OUTPUT );
   pinMode( rst_pin, OUTPUT );
   pinMode( cs_pin, OUTPUT );
   digitalWrite( cs_pin, HIGH );
}

OLED_SSD1306_SPI::~OLED_SSD1306_SPI() {
   if (!buffer) {
     free( buffer );
   }
   buffer = NULL;
}

void OLED_SSD1306_SPI::send_cmd( uint8_t cmd ) {
   digitalWrite( dc_pin, LOW );  // command
   digitalWrite( cs_pin, LOW );
   if (use_hw_spi) {
     SPI.transfer( cmd );
   } else {
     shiftOut( mosi_pin, sck_pin, MSBFIRST, cmd );
   }
   digitalWrite( cs_pin, HIGH );
}

void OLED_SSD1306_SPI::init() {
   digitalWrite( rst_pin, LOW );
   delay(50);
   digitalWrite( rst_pin, HIGH );
   delay(100);
   
   send_cmd( 0xAE );   // turn display off, sleep mode
   send_cmd( 0xD5 );   // set display clock ratio and frequency
   send_cmd( 0x80 );   // -> frequency = 0x8, divide ratio = 0x0

   send_cmd( 0xDB );   // set common deselect level (V_COMH)
   send_cmd( 0x10 );   // -> 0x10 = 0.77 x VCC (default)

   send_cmd( 0xD9 );   // set precharge period
   send_cmd( 0xF1 );   // -> phase2 = 0xF, phase1 = 0x1

   send_cmd( 0x8D );   // set charge pump
   send_cmd( 0x14 );   // -> 0x14 (enable charge pump)

   send_cmd( 0xA8 );   // set multiplex ratio
   send_cmd( 0x3F );   // -> 1/64 duty

   send_cmd( 0xD3 );   // set display offset (vertical shift)
   send_cmd( 0x00 );   // -> offset = 0x00 (default)

   send_cmd( 0x81 );   // set contrast
   send_cmd( 0xFF );   // -> 0xff (max. value)

   send_cmd( 0x40 );   // set display start line -> line 0
   send_cmd( 0xA1 );   // set segment re-map: column address 127 is mapped to SEG0
   send_cmd( 0xC8 );   // set common-output scan direction: Scan from COM63 to COM0
   send_cmd( 0xDA );   // set common pins shardware configuration
   send_cmd( 0x02 | (0b01 << 4) ); // use alternative COM pin configuration,
                                         // disable COM Left/Right remap
   send_cmd( 0x20 );   // set memory addressing mode
   send_cmd( 0x00 );   // -> 0x00 (horizontal addressing mode)

   send_cmd( 0x21 );   // set column address (0..127 columns for 128x64 display)
   send_cmd( 0 );      // set column start address
   send_cmd( 127 );    // set column end address

   send_cmd( 0x22 );   // set page address (0..7 pages for 128x64 display)
   send_cmd( 0 );      // set page start address
   send_cmd( 7 );      // set page end address

   send_cmd( 0xA4 );   // resume to RAM content display (default)
   send_cmd( 0xA6 );   // normal display (default)

   send_cmd( 0xAF );   // turn display on, normal mode
   clearDisplay();
}

void OLED_SSD1306_SPI::update() {
   digitalWrite( dc_pin, HIGH );  // data
   digitalWrite( cs_pin, LOW );
   for ( uint16_t i=0; i < BUFFER_SIZE; i++ ) {
     if (use_hw_spi) {
       SPI.transfer( buffer[i] );
     } else {
       shiftOut( mosi_pin, sck_pin, MSBFIRST, buffer[i] );
     }
   }
   digitalWrite( cs_pin, HIGH );
}

void OLED_SSD1306_SPI::clearBuffer() {
  memset( buffer, 0x00, BUFFER_SIZE );
}

void OLED_SSD1306_SPI::clearDisplay() {
  clearBuffer();
  update();
}

void OLED_SSD1306_SPI::displayOnOff( boolean onOff ) {
  send_cmd( onOff ? 0xAF : 0xAE );
}

void OLED_SSD1306_SPI::inverseDisplay( boolean inverse ) {
  send_cmd( inverse ? 0xA7 : 0xA6 );
}

void OLED_SSD1306_SPI::writeByteToBuffer( uint8_t x, uint8_t y, uint8_t data ) {
  if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
     return;
  buffer[x + ((uint16_t)y/8) * LCD_WIDTH] = data;
}

void OLED_SSD1306_SPI::drawText( uint8_t x, uint8_t y, const char *text ) {
  uint16_t pos, p = x + ((uint16_t)y/8) * LCD_WIDTH;
  uint8_t vshift = (y%8);
  uint8_t data;
  for ( uint8_t i=0; i < strlen(text); i++ ) {
    pos = font_width*(text[i]-0x20);
    for ( uint8_t j=0; j < font_width; j++ ) {
       data = pgm_read_byte_near( font + pos );
       pos++;
       if ( vshift > 0 ) {
         buffer[ p ] |= (data << vshift);
         buffer[ p + LCD_WIDTH ] |= (data >> (8-vshift));
       } else {
         buffer[ p ] |= data;
       }
       p++;
    }
    p += 1;
  }
}

void OLED_SSD1306_SPI::drawPixel( uint8_t x, uint8_t y, boolean onOff ) {
  if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
     return;
  if ( onOff ) { // set pixel
     buffer[x + ((uint16_t)y/8) * LCD_WIDTH] |= 1 << (y%8);
  } else { // clear pixel
     buffer[x + ((uint16_t)y/8) * LCD_WIDTH] &= ~(1 << (y%8));
  }
}

void OLED_SSD1306_SPI::drawRect( uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1 ) {
  x1 = min( x1, LCD_WIDTH-1 );
  y1 = min( y1, LCD_HEIGHT-1 );
  for ( uint8_t i=x0; i <= x1; i++ ) {
     drawPixel( i, y0, true );
     drawPixel( i, y1, true );
  }
  for ( uint8_t j=y0; j <= y1; j++ ) {
     drawPixel( x0, j, true );
     drawPixel( x1, j, true );
  }
}

// normal font
static prog_uchar NORMAL_FONT[] PROGMEM = { // 96 x 5 bytes
	0x00, 0x00, 0x00, 0x00, 0x00, // space
	0x00, 0x00, 0x5F, 0x00, 0x00, // !
	0x00, 0x07, 0x00, 0x07, 0x00, // "
	0x14, 0x7F, 0x14, 0x7F, 0x14, // #
	0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
	0x23, 0x13, 0x08, 0x64, 0x62, // %
	0x36, 0x49, 0x56, 0x20, 0x50, // &
	0x00, 0x08, 0x07, 0x03, 0x00, // '
	0x00, 0x1C, 0x22, 0x41, 0x00, // (
	0x00, 0x41, 0x22, 0x1C, 0x00, // )
	0x2A, 0x1C, 0x7F, 0x1C, 0x2A, // *
	0x08, 0x08, 0x3E, 0x08, 0x08, // +
	0x00, 0x40, 0x38, 0x18, 0x00, // ,
	0x08, 0x08, 0x08, 0x08, 0x08, // -
	0x00, 0x00, 0x60, 0x60, 0x00, // .
	0x20, 0x10, 0x08, 0x04, 0x02, // /
	0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
	0x00, 0x42, 0x7F, 0x40, 0x00, // 1
	0x42, 0x61, 0x51, 0x49, 0x46, // 2
	0x21, 0x41, 0x49, 0x4D, 0x33, // 3
	0x18, 0x14, 0x12, 0x7F, 0x10, // 4
	0x27, 0x45, 0x45, 0x45, 0x39, // 5
	0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
	0x41, 0x21, 0x11, 0x09, 0x07, // 7
	0x36, 0x49, 0x49, 0x49, 0x36, // 8
	0x06, 0x49, 0x49, 0x29, 0x1E, // 9
	0x00, 0x00, 0x14, 0x00, 0x00, // :
	0x00, 0x00, 0x40, 0x34, 0x00, // ;
	0x00, 0x08, 0x14, 0x22, 0x41, // <
	0x14, 0x14, 0x14, 0x14, 0x14, // =
	0x00, 0x41, 0x22, 0x14, 0x08, // >
	0x02, 0x01, 0x51, 0x09, 0x06, // ?
	0x3E, 0x41, 0x5D, 0x59, 0x4E, // @
	0x7C, 0x12, 0x11, 0x12, 0x7C, // A
	0x7F, 0x49, 0x49, 0x49, 0x36, // B
	0x3E, 0x41, 0x41, 0x41, 0x22, // C
	0x7F, 0x41, 0x41, 0x41, 0x3E, // D
	0x7F, 0x49, 0x49, 0x49, 0x41, // E
	0x7F, 0x09, 0x09, 0x09, 0x01, // F
	0x3E, 0x41, 0x49, 0x49, 0x7A, // G
	0x7F, 0x08, 0x08, 0x08, 0x7F, // H
	0x00, 0x41, 0x7F, 0x41, 0x00, // I
	0x20, 0x40, 0x41, 0x3F, 0x01, // J
	0x7F, 0x08, 0x14, 0x22, 0x41, // K
	0x7F, 0x40, 0x40, 0x40, 0x40, // L
	0x7F, 0x02, 0x1C, 0x02, 0x7F, // M
	0x7F, 0x04, 0x08, 0x10, 0x7F, // N
	0x3E, 0x41, 0x41, 0x41, 0x3E, // O
	0x7F, 0x09, 0x09, 0x09, 0x06, // P
	0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
	0x7F, 0x09, 0x19, 0x29, 0x46, // R
	0x26, 0x49, 0x49, 0x49, 0x32, // S
	0x01, 0x01, 0x7F, 0x01, 0x01, // T
	0x3F, 0x40, 0x40, 0x40, 0x3F, // U
	0x1F, 0x20, 0x40, 0x20, 0x1F, // V
	0x3F, 0x40, 0x38, 0x40, 0x3F, // W
	0x63, 0x14, 0x08, 0x14, 0x63, // X
	0x03, 0x04, 0x78, 0x04, 0x03, // Y
	0x61, 0x51, 0x49, 0x45, 0x43, // Z
	0x00, 0x7F, 0x41, 0x41, 0x41, // [
	0x02, 0x04, 0x08, 0x10, 0x20, // '\'
	0x00, 0x41, 0x41, 0x41, 0x7F, // ]
	0x04, 0x02, 0x01, 0x02, 0x04, // ^
	0x80, 0x80, 0x80, 0x80, 0x80, // _
	0x00, 0x03, 0x07, 0x08, 0x00, // '
	0x20, 0x54, 0x54, 0x54, 0x78, // a
	0x7F, 0x28, 0x44, 0x44, 0x38, // b
	0x38, 0x44, 0x44, 0x44, 0x28, // c
	0x38, 0x44, 0x44, 0x28, 0x7F, // d
	0x38, 0x54, 0x54, 0x54, 0x18, // e
	0x00, 0x08, 0x7E, 0x09, 0x02, // f
	0x18, 0xA4, 0xA4, 0xA4, 0x7C, // g
	0x7F, 0x08, 0x04, 0x04, 0x78, // h
	0x00, 0x44, 0x7D, 0x40, 0x00, // i
	0x00, 0x20, 0x40, 0x40, 0x3D, // j
	0x00, 0x7F, 0x10, 0x28, 0x44, // k
	0x00, 0x41, 0x7F, 0x40, 0x00, // l
	0x7C, 0x04, 0x78, 0x04, 0x78, // m
	0x7C, 0x08, 0x04, 0x04, 0x78, // n
	0x38, 0x44, 0x44, 0x44, 0x38, // o
	0xFC, 0x18, 0x24, 0x24, 0x18, // p
	0x18, 0x24, 0x24, 0x18, 0xFC, // q
	0x7C, 0x08, 0x04, 0x04, 0x08, // r
	0x48, 0x54, 0x54, 0x54, 0x24, // s
	0x04, 0x04, 0x3F, 0x44, 0x24, // t
	0x3C, 0x40, 0x40, 0x20, 0x7C, // u
	0x1C, 0x20, 0x40, 0x20, 0x1C, // v
	0x3C, 0x40, 0x30, 0x40, 0x3C, // w
	0x44, 0x28, 0x10, 0x28, 0x44, // x
	0x4C, 0x90, 0x90, 0x90, 0x7C, // y
	0x44, 0x64, 0x54, 0x4C, 0x44, // z
	0x00, 0x08, 0x36, 0x41, 0x00, // {
	0x00, 0x00, 0x77, 0x00, 0x00, // |
	0x00, 0x41, 0x36, 0x08, 0x00, // }
	0x02, 0x01, 0x02, 0x04, 0x02, // ~
	0x00, 0x06, 0x09, 0x09, 0x06, // degree
};

// Bold font
static prog_uchar BOLD_FONT[] PROGMEM = { // 96 x 8 bytes
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // ' '
    0x00, 0x00, 0x00, 0xDF, 0xDF, 0x00, 0x00, 0x00,   // '!'
    0x00, 0x03, 0x07, 0x00, 0x03, 0x07, 0x00, 0x00,   // '"'
    0x00, 0x14, 0x3E, 0x14, 0x3E, 0x14, 0x00, 0x00,   // '#'
    0x00, 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00, 0x00,   // '$'
    0x43, 0x23, 0x10, 0x08, 0x04, 0x62, 0x61, 0x00,   // '%'
    0x38, 0x7C, 0x44, 0x7F, 0x3F, 0x04, 0x04, 0x00,   // '&'
    0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00,   // '''
    0x00, 0x00, 0x7E, 0xFF, 0x81, 0x00, 0x00, 0x00,   // '('
    0x00, 0x00, 0x81, 0xFF, 0x7E, 0x00, 0x00, 0x00,   // ')'
    0x08, 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x08, 0x00,   // '*'
    0x00, 0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00,   // '+'
    0x00, 0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00,   // ','
    0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00,   // '-'
    0x00, 0x00, 0x00, 0xC0, 0xC0, 0x00, 0x00, 0x00,   // '.'
    0x00, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0x00, 0x00,   // '/'
    0x3E, 0x7F, 0x51, 0x49, 0x45, 0x7F, 0x3E, 0x00,   // '0'
    0x00, 0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00,   // '1'
    0x72, 0x7B, 0x49, 0x49, 0x49, 0x4F, 0x46, 0x00,   // '2'
    0x22, 0x63, 0x41, 0x49, 0x49, 0x7F, 0x36, 0x00,   // '3'
    0x07, 0x0F, 0x08, 0x08, 0x08, 0x7E, 0x7E, 0x00,   // '4'
    0x27, 0x6F, 0x49, 0x49, 0x49, 0x79, 0x31, 0x00,   // '5'
    0x3E, 0x7F, 0x49, 0x49, 0x49, 0x79, 0x30, 0x00,   // '6'
    0x01, 0x01, 0x01, 0x01, 0x01, 0x7F, 0x7E, 0x00,   // '7'
    0x36, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00,   // '8'
    0x06, 0x0F, 0x09, 0x09, 0x09, 0x7F, 0x7F, 0x00,   // '9'
    0x00, 0x00, 0x00, 0x63, 0x63, 0x00, 0x00, 0x00,   // ':'
    0x00, 0x00, 0x80, 0xE3, 0x63, 0x00, 0x00, 0x00,   // ';'
    0x00, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00,   // '<'
    0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x00,   // '='
    0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00,   // '>'
    0x02, 0x03, 0xD1, 0xD9, 0x09, 0x0F, 0x06, 0x00,   // '?'
    0x3E, 0x7F, 0x41, 0x5D, 0x55, 0x5F, 0x0E, 0x00,   // '@'
    0x7E, 0x7F, 0x09, 0x09, 0x09, 0x7F, 0x7E, 0x00,   // 'A'
    0x7F, 0x7F, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00,   // 'B'
    0x3E, 0x7F, 0x41, 0x41, 0x41, 0x63, 0x22, 0x00,   // 'C'
    0x7F, 0x7F, 0x41, 0x41, 0x63, 0x3E, 0x1C, 0x00,   // 'D'
    0x7F, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x41, 0x00,   // 'E'
    0x7F, 0x7F, 0x09, 0x09, 0x09, 0x01, 0x01, 0x00,   // 'F'
    0x3E, 0x7F, 0x41, 0x49, 0x49, 0x7B, 0x7A, 0x00,   // 'G'
    0x7F, 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x7F, 0x00,   // 'H'
    0x00, 0x41, 0x41, 0x7F, 0x7F, 0x41, 0x41, 0x00,   // 'I'
    0x20, 0x61, 0x41, 0x7F, 0x3F, 0x01, 0x01, 0x00,   // 'J'
    0x7F, 0x7F, 0x08, 0x1C, 0x36, 0x63, 0x41, 0x00,   // 'K'
    0x7F, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00,   // 'L'
    0x7F, 0x7F, 0x06, 0x0C, 0x06, 0x7F, 0x7F, 0x00,   // 'M'
    0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00,   // 'N'
    0x3E, 0x7F, 0x41, 0x41, 0x41, 0x7F, 0x3E, 0x00,   // 'O'
    0x7F, 0x7F, 0x09, 0x09, 0x09, 0x0F, 0x06, 0x00,   // 'P'
    0x3E, 0x7F, 0x41, 0x61, 0xC1, 0xFF, 0xBE, 0x00,   // 'Q'
    0x7F, 0x7F, 0x09, 0x09, 0x09, 0x7F, 0x76, 0x00,   // 'R'
    0x26, 0x6F, 0x49, 0x49, 0x49, 0x7B, 0x32, 0x00,   // 'S'
    0x00, 0x01, 0x01, 0x7F, 0x7F, 0x01, 0x01, 0x00,   // 'T'
    0x3F, 0x7F, 0x40, 0x40, 0x40, 0x7F, 0x7F, 0x00,   // 'U'
    0x00, 0x07, 0x1F, 0x78, 0x78, 0x1F, 0x07, 0x00,   // 'V'
    0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00,   // 'W'
    0x63, 0x77, 0x1C, 0x08, 0x1C, 0x77, 0x63, 0x00,   // 'X'
    0x27, 0x6F, 0x48, 0x48, 0x48, 0x7F, 0x3F, 0x00,   // 'Y'
    0x61, 0x71, 0x59, 0x4D, 0x47, 0x43, 0x41, 0x00,   // 'Z'
    0x00, 0x00, 0xFF, 0xFF, 0x81, 0x81, 0x00, 0x00,   // '['
    0x00, 0x03, 0x0F, 0x3C, 0xF0, 0xC0, 0x00, 0x00,   // '\\'
    0x00, 0x00, 0x81, 0x81, 0xFF, 0xFF, 0x00, 0x00,   // ']'
    0x04, 0x06, 0x03, 0x01, 0x03, 0x06, 0x04, 0x00,   // '^'
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00,   // '_'
    0x03, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,   // '`'
    0x38, 0x7C, 0x44, 0x44, 0x24, 0x7C, 0x78, 0x00,   // 'a'
    0x7F, 0x7F, 0x24, 0x44, 0x44, 0x7C, 0x38, 0x00,   // 'b'
    0x38, 0x7C, 0x44, 0x44, 0x44, 0x44, 0x44, 0x00,   // 'c'
    0x38, 0x7C, 0x44, 0x44, 0x24, 0x7F, 0x7F, 0x00,   // 'd'
    0x38, 0x7C, 0x54, 0x54, 0x54, 0x5C, 0x08, 0x00,   // 'e'
    0x00, 0x04, 0x7E, 0x7F, 0x05, 0x01, 0x00, 0x00,   // 'f'
    0x18, 0xBC, 0xA4, 0xA4, 0x94, 0xFC, 0x78, 0x00,   // 'g'
    0x7F, 0x7F, 0x08, 0x04, 0x04, 0x7C, 0x78, 0x00,   // 'h'
    0x00, 0x00, 0x00, 0x7D, 0x7D, 0x00, 0x00, 0x00,   // 'i'
    0x00, 0x40, 0x40, 0x40, 0x7D, 0x3D, 0x00, 0x00,   // 'j'
    0x7F, 0x7F, 0x08, 0x08, 0x1C, 0x76, 0x62, 0x00,   // 'k'
    0x00, 0x00, 0x00, 0x7F, 0x7F, 0x00, 0x00, 0x00,   // 'l'
    0x78, 0x7C, 0x18, 0x30, 0x18, 0x7C, 0x78, 0x00,   // 'm'
    0x7C, 0x7C, 0x08, 0x04, 0x04, 0x7C, 0x78, 0x00,   // 'n'
    0x38, 0x7C, 0x44, 0x44, 0x44, 0x7C, 0x38, 0x00,   // 'o'
    0xFC, 0xFC, 0x28, 0x24, 0x24, 0x3C, 0x18, 0x00,   // 'p'
    0x1C, 0x1E, 0x22, 0x22, 0x12, 0xFE, 0xFE, 0x00,   // 'q'
    0x7C, 0x7C, 0x08, 0x04, 0x04, 0x0C, 0x08, 0x00,   // 'r'
    0x48, 0x5C, 0x54, 0x54, 0x54, 0x74, 0x20, 0x00,   // 's'
    0x3F, 0x7F, 0x44, 0x44, 0x44, 0x60, 0x20, 0x00,   // 't'
    0x3C, 0x7C, 0x40, 0x40, 0x20, 0x7C, 0x7C, 0x00,   // 'u'
    0x00, 0x0C, 0x3C, 0x70, 0x70, 0x3C, 0x0C, 0x00,   // 'v'
    0x3C, 0x7C, 0x30, 0x18, 0x30, 0x7C, 0x3C, 0x00,   // 'w'
    0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00,   // 'x'
    0x0C, 0x5C, 0x50, 0x50, 0x50, 0x7C, 0x3C, 0x00,   // 'y'
    0x44, 0x64, 0x74, 0x54, 0x5C, 0x4C, 0x44, 0x00,   // 'z'
    0x00, 0x08, 0x3E, 0x77, 0x41, 0x00, 0x00, 0x00,   // '{'
    0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00,   // '|'
    0x00, 0x41, 0x77, 0x3E, 0x08, 0x00, 0x00, 0x00,   // '}'
    0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00,   // '~'
    0x00, 0x06, 0x06, 0x09, 0x09, 0x09, 0x06, 0x06,   // degree
};

void OLED_SSD1306_SPI::useBoldFont() {
  font_width = 8;
  font = BOLD_FONT;
}

void OLED_SSD1306_SPI::useNormalFont() {
  font_width = 5;
  font = NORMAL_FONT;
}

//////////////////////////////////////////////////////////////////////////

